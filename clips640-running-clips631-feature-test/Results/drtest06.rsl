drtest06.bat differences are as follows:
    36: CLIPS> (defrule foo                       ; DR0503
    36: 
    37:    (items $?list)
    37: [EXPRNPSR3] Missing function declaration for 'mv-append'.
    38:    (test (subset ?list ?*global-list*))
    38: 
    39:    =>
    39: ERROR:
    40:    (printout t "Success!" crlf))
    40: (defglobal MAIN ?*global-list* = (mv-append
    41: CLIPS> (assert (items 2 3))               ; DR0503
    41: CLIPS> (defrule foo                       ; DR0503
    42: <Fact-1>
    42:    (items $?list)
    43: CLIPS> (run)                              ; DR0503 - Success!
    43:    (test (subset ?list ?*global-list*))
    44: Success!
    44:    =>
    45: CLIPS> (clear)                            ; DR0504
    45:    (printout t "Success!" crlf))
    46: CLIPS> (defrule blah =>)                  ; DR0504
    46: 
    47: CLIPS> (deffacts a (x y) (z q))           ; DR0504
    47: [EXPRNPSR3] Missing function declaration for 'subset'.
    48: CLIPS> (deftemplate foob (field x))       ; DR0504
    48: 
    49: CLIPS> (defglobal ?*x* = 6)               ; DR0504
    49: ERROR:
    50: CLIPS> (deffunction quox (?x) (* ?x 3))   ; DR0504
    50: (defrule MAIN::foo
    51: CLIPS> (defclass hip (is-a USER))         ; DR0504
    51:    (items $?list)
    52: CLIPS> (bsave "Temp//drtest06.bin")       ; DR0504
    52:    (test (subset
    53: [CSTRNBIN1] WARNING: Constraints are not saved with a binary image
    53: CLIPS> (assert (items 2 3))               ; DR0503
    54:   when dynamic constraint checking is disabled.
    54: <Fact-1>
    55: TRUE
    55: CLIPS> (run)                              ; DR0503 - Success!
    56: CLIPS> (bload "Temp//drtest06.bin")       ; DR0504
    56: CLIPS> (clear)                            ; DR0504
    57: TRUE
    57: CLIPS> (defrule blah =>)                  ; DR0504
    58: CLIPS> (bload "Temp//drtest06.bin")       ; DR0504
    58: CLIPS> (deffacts a (x y) (z q))           ; DR0504
    59: TRUE
    59: CLIPS> (deftemplate foob (field x))       ; DR0504
    60: CLIPS> (clear)                            ; DR0504
    60: CLIPS> (defglobal ?*x* = 6)               ; DR0504
    61: CLIPS> (clear)                            ; DR0506
    61: CLIPS> (deffunction quox (?x) (* ?x 3))   ; DR0504
    62: CLIPS> (retract *)                        ; DR0506
    62: CLIPS> (defclass hip (is-a USER))         ; DR0504
    63: CLIPS> (clear)                            ; DR0508
    63: CLIPS> (bsave "Temp//drtest06.bin")       ; DR0504
    64: CLIPS> (deffacts list-fact                ; DR0508
    64: [CSTRNBIN1] WARNING: Constraints are not saved with a binary image
    65:    (list 12 "=" 3.0 i2))
    65:   when dynamic constraint checking is disabled.
    66: CLIPS> (defrule test-member               ; DR0508
    66: TRUE
    67:    (list $?list)
    67: CLIPS> (bload "Temp//drtest06.bin")       ; DR0504
    68:    =>
    68: TRUE
    69:    (printout t "position=" (member i2 ?list) crlf))
    69: CLIPS> (bload "Temp//drtest06.bin")       ; DR0504
    70: CLIPS> (reset)                            ; DR0508
    70: TRUE
    71: CLIPS> (run)                              ; DR0508 - position=4
    71: CLIPS> (clear)                            ; DR0504
    72: position=4
    72: CLIPS> (clear)                            ; DR0506
    73: CLIPS> (clear)                            ; DR0511
    73: CLIPS> (retract *)                        ; DR0506
    74: CLIPS> (deftemplate calculate             ; DR0511
    74: CLIPS> (clear)                            ; DR0508
    75:    (field operation
    75: CLIPS> (deffacts list-fact                ; DR0508
    76:       (type SYMBOL) (default ?NONE)))
    76:    (list 12 "=" 3.0 i2))
    77: CLIPS> (assert (calculate (operation +))) ; DR0511
    77: CLIPS> (defrule test-member               ; DR0508
    78: <Fact-1>
    78:    (list $?list)
    79: CLIPS> (modify 1 
    79:    =>
    80:    (calculate (operation op2)))    ; DR0511 - Error
    80:    (printout t "position=" (member i2 ?list) crlf))
    82: [EXPRNPSR3] Missing function declaration for operation.
    82: [EXPRNPSR3] Missing function declaration for 'member'.
    83: CLIPS> (duplicate 1 
    83: 
    84:    (calculate (operation word)))   ; DR0511 - Error
    84: ERROR:
    85: 
    85: (defrule MAIN::test-member
    86: [EXPRNPSR3] Missing function declaration for operation.
    86:    (list $?list)
    87: CLIPS> (clear)                            ; DR0512
    87:    =>
    88: CLIPS> (deftemplate calculate             ; DR0512
    88:    (printout t "position=" (member
    89:    (field operation
    89: CLIPS> (reset)                            ; DR0508
    90:       (type SYMBOL) (default ?NONE)))
    90: CLIPS> (run)                              ; DR0508 - position=4
    91: CLIPS> (assert (calculate 
    91: CLIPS> (clear)                            ; DR0511
    92:         (operation 4<56)))         ; DR0512 - Error
    92: CLIPS> (deftemplate calculate             ; DR0511
    93: 
    93:    (field operation
    94: [TMPLTDEF2] The single field slot operation can only contain a single field value.
    94:       (type SYMBOL) (default ?NONE)))
    95: CLIPS> (assert (calculate (operation go)))
    95: CLIPS> (assert (calculate (operation +))) ; DR0511
    97: CLIPS> (modify 1 (operation 467<789)))    ; DR0512 - Error
    97: CLIPS> (modify 1 
    98: 
    98:    (calculate (operation op2)))    ; DR0511 - Error
    99: [TMPLTFUN2] Attempted to assert a multifield value 
    99: 
   100: into the single field slot operation of deftemplate calculate.
   100: [EXPRNPSR3] Missing function declaration for 'operation'.
   101: FALSE
   101: CLIPS> (duplicate 1 
   102: CLIPS> (duplicate 1 (operation 54<2345))) ; DR0512 - Error
   102:    (calculate (operation word)))   ; DR0511 - Error
   104: [TMPLTFUN2] Attempted to assert a multifield value 
   104: [EXPRNPSR3] Missing function declaration for 'operation'.
   105: into the single field slot operation of deftemplate calculate.
   105: CLIPS> (clear)                            ; DR0512
   106: FALSE
   106: CLIPS> (deftemplate calculate             ; DR0512
   107: CLIPS> (clear)                            ; DR0517
   107:    (field operation
   108: CLIPS> (deftemplate r                     ; DR0517
   108:       (type SYMBOL) (default ?NONE)))
   109:    (field mine) (field yours))     ; DR0517
   109: CLIPS> (assert (calculate 
   110: CLIPS> (watch facts)                      ; DR0517
   110:         (operation 4<56)))         ; DR0512 - Error
   111: CLIPS> (assert (r (mine "string")))       ; DR0517
   111: 
   112: ==> f-1     (r (mine "string") (yours nil))
   112: [TMPLTDEF2] The single field slot 'operation' can only contain a single field value.
   113: <Fact-1>
   113: CLIPS> (assert (calculate (operation go)))
   114: CLIPS> (assert (r (yours this-is-a-word)))
   114: <Fact-1>
   115: ==> f-2     (r (mine nil) (yours this-is-a-word))
   115: CLIPS> (modify 1 (operation 467<789)))    ; DR0512 - Error
   116: <Fact-2>
   116: 
   117: CLIPS> (modify 1 (mine "string"))         ; DR0517
   117: [TMPLTFUN1] Attempted to assert a multifield value into the single field slot 'operation' of deftemplate 'calculate'.
   118: <== f-1     (r (mine "string") (yours nil))
   118: FALSE
   119: ==> f-3     (r (mine "string") (yours nil))
   119: CLIPS> (duplicate 1 (operation 54<2345))) ; DR0512 - Error
   120: <Fact-3>
   120: 
   121: CLIPS> (modify 2 (yours wordie))          ; DR0517
   121: [TMPLTFUN1] Attempted to assert a multifield value into the single field slot 'operation' of deftemplate 'calculate'.
   122: <== f-2     (r (mine nil) (yours this-is-a-word))
   122: FALSE
   123: ==> f-4     (r (mine nil) (yours wordie))
   123: CLIPS> (clear)                            ; DR0517
   124: <Fact-4>
   124: CLIPS> (deftemplate r                     ; DR0517
   125: CLIPS> (modify 4 (yours is-mine))         ; DR0517
   125:    (field mine) (field yours))     ; DR0517
   126: <== f-4     (r (mine nil) (yours wordie))
   126: CLIPS> (watch facts)                      ; DR0517
   127: ==> f-5     (r (mine nil) (yours is-mine))
   127: CLIPS> (assert (r (mine "string")))       ; DR0517
   128: <Fact-5>
   128: ==> f-1     (r (mine "string") (yours nil))
   129: CLIPS> (unwatch facts)                    ; DR0517
   129: <Fact-1>
   130: CLIPS> (clear)                            ; DR0519
   130: CLIPS> (assert (r (yours this-is-a-word)))
   131: CLIPS> (deftemplate result                ; DR0519
   131: ==> f-2     (r (mine nil) (yours this-is-a-word))
   132:    (field x
   132: <Fact-2>
   133:       (type NUMBER)
   133: CLIPS> (modify 1 (mine "string"))         ; DR0517
   134:       (allowed-floats 5.0  6.0  7.0  8.8  9.0  8.0)
   134: <Fact-1>
   135:       (allowed-integers  1 2 3 4)
   135: CLIPS> (modify 2 (yours wordie))          ; DR0517
   136:       (default ?NONE)))
   136: <== f-2     (r ... (yours this-is-a-word))
   137: CLIPS> (assert (result (x 6)))            ; DR0519
   137: ==> f-2     (r ... (yours wordie))
   138: 
   138: <Fact-2>
   139: [CSTRNCHK1] A literal slot value found in the assert command
   139: CLIPS> (modify 4 (yours is-mine))         ; DR0517
   140: does not match the allowed values for slot x.
   140: [PRNTUTIL1] Unable to find fact f-4.
   141: CLIPS> (clear)                            ; DR0520
   141: FALSE
   142: CLIPS> (assert (a) (b) (c))               ; DR0520
   142: CLIPS> (unwatch facts)                    ; DR0517
   143: <Fact-3>
   143: CLIPS> (clear)                            ; DR0519
   144: CLIPS> (facts)                            ; DR0520
   144: CLIPS> (deftemplate result                ; DR0519
   145: f-0     (initial-fact)
   145:    (field x
   146: f-1     (a)
   146:       (type NUMBER)
   147: f-2     (b)
   147:       (allowed-floats 5.0  6.0  7.0  8.8  9.0  8.0)
   148: f-3     (c)
   148:       (allowed-integers  1 2 3 4)
   149: For a total of 4 facts.
   149:       (default ?NONE)))
   150: CLIPS> (facts 1 3 2)                      ; DR0520
   150: CLIPS> (assert (result (x 6)))            ; DR0519
   151: f-1     (a)
   151: 
   152: f-2     (b)
   152: [CSTRNCHK1] A literal slot value found in the 'assert' command does not match the allowed values for slot 'x'.
   153: For a total of 2 facts.
   153: CLIPS> (clear)                            ; DR0520
   154: CLIPS> (facts 3)                          ; DR0520
   154: CLIPS> (assert (a) (b) (c))               ; DR0520
   155: f-3     (c)
   155: <Fact-3>
   156: For a total of 1 fact.
   156: CLIPS> (facts)                            ; DR0520
   157: CLIPS> (not FALSE)                        ; DR0521 - TRUE
   157: f-1     (a)
   158: TRUE
   158: f-2     (b)
   159: CLIPS> (not "FALSE")                      ; DR0521 - FALSE
   159: f-3     (c)
   160: FALSE
   160: For a total of 3 facts.
   161: CLIPS> (clear)                            ; DR0522
   161: CLIPS> (facts 1 3 2)                      ; DR0520
   162: CLIPS> (deftemplate foo (field x))        ; DR0522
   162: f-1     (a)
   163: CLIPS> (assert (foo (x (1 2))))           ; DR0522 - Error
   163: f-2     (b)
   164: 
   164: For a total of 2 facts.
   165: [EXPRNPSR1] A function name must be a symbol
   165: CLIPS> (facts 3)                          ; DR0520
   166: CLIPS> (facts)                            ; DR0522 - None
   166: f-3     (c)
   167: f-0     (initial-fact)
   167: For a total of 1 fact.
   168: For a total of 1 fact.
   168: CLIPS> (not FALSE)                        ; DR0521 - TRUE
   169: CLIPS> (print-region 1 1)                 ; DR0524 - Error
   169: TRUE
   170: [ARGACCES5] Function print-region expected argument #1 to be of type symbol
   170: CLIPS> (not "FALSE")                      ; DR0521 - FALSE
   171: CLIPS> (print-region 3 "foo.lis" ROOT SUBTOPIC)    
   171: FALSE
   172: [ARGACCES5] Function print-region expected argument #1 to be of type symbol
   172: CLIPS> (clear)                            ; DR0522
   173: CLIPS> (print-region t 3 ROOT SUBTOPIC)   ; DR0524 - Error
   173: CLIPS> (deftemplate foo (field x))        ; DR0522
   174: [ARGACCES5] Function print-region expected argument #2 to be of type symbol or string
   174: CLIPS> (assert (foo (x (1 2))))           ; DR0522 - Error
   175: CLIPS> (deffunction mftest ()             ; DR0525
   175: 
   176:    (bind ?result (mv-append))
   176: [EXPRNPSR1] A function name must be a symbol.
   177:    (bind ?i 140)
   177: CLIPS> (facts)                            ; DR0522 - None
   178:    (while (> ?i 0) do
   178: CLIPS> (print-region 1 1)                 ; DR0524 - Error
   179:       (bind ?result (mv-append ?i ?result))
   179: [ARGACCES2] Function 'print-region' expected argument #1 to be of type symbol.
   180:       (bind ?i (- ?i 1)))
   180: CLIPS> (print-region 3 "foo.lis" ROOT SUBTOPIC)    
   181:    ?result)
   181: [ARGACCES2] Function 'print-region' expected argument #1 to be of type symbol.
   182: CLIPS> (mftest)                           ; DR0525
   182: CLIPS> (print-region t 3 ROOT SUBTOPIC)   ; DR0524 - Error
   183: (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140)
   183: [ARGACCES2] Function 'print-region' expected argument #2 to be of type symbol or string.
   184: CLIPS> (clear)                            ; DR0526
   184: CLIPS> (deffunction mftest ()             ; DR0525
   185: CLIPS> (defrule dr0384                    ; DR0526
   185:    (bind ?result (mv-append))
   186:    =>
   186:    (bind ?i 140)
   187:    (bind ?a (** 2 (- -11 (numberp 3))))
   187:    (while (> ?i 0) do
   188:    (if (and (< ?a 0.000245)  (>=  ?a 0.000244))
   188:       (bind ?result (mv-append ?i ?result))
   189:        then (assert (DR0384 OK))))
   189:       (bind ?i (- ?i 1)))
   190: [ARGACCES5] Function - expected argument #2 to be of type integer or float
   190:    ?result)
   192: ERROR:
   192: [EXPRNPSR3] Missing function declaration for 'mv-append'.
   193: (defrule MAIN::dr0384
   193: 
   194:    =>
   194: ERROR:
   195:    (bind ?a (** 2 (- -11 (numberp 3))
   195: (deffunction MAIN::mftest
   196: CLIPS> (seed (5))                         ; DR0527
   196:    ()
   197: 
   197:    (bind ?result (mv-append
   198: [EXPRNPSR1] A function name must be a symbol
   198: CLIPS> (mftest)                           ; DR0525
   199: CLIPS> (sym-cat (str-explode "a s d g e f")) ; DR0528 - Error
   199: 
   200: [ARGACCES5] Function sym-cat expected argument #1 to be of type string, instance name, symbol, float, or integer
   200: [EXPRNPSR3] Missing function declaration for 'mftest'.
   201: nil
   201: CLIPS> (clear)                            ; DR0526
   202: CLIPS> (str-length                        ; DR0529 - Error
   202: CLIPS> (defrule dr0384                    ; DR0526
   203:    (str-implode ((mv-append 1 2 3 4)
   203:    =>
   204: 						           (mv-append 4 3 2 1))))
   204:    (bind ?a (** 2 (- -11 (numberp 3))))
   205: 
   205:    (if (and (< ?a 0.000245)  (>=  ?a 0.000244))
   206: [EXPRNPSR1] A function name must be a symbol
   206:        then (assert (DR0384 OK))))
   207: CLIPS> (deg-grad 90)                      ; DR0532 - 100.0
   207: [ARGACCES2] Function '-' expected argument #2 to be of type integer or float.
   208: 100.0
   208: 
   209: CLIPS> (* 3.6 15.0)                       ; DR0533 - 54.0
   209: ERROR:
   210: 54.0
   210: (defrule MAIN::dr0384
   211: CLIPS> (* 3.0 15.0)                       ; DR0533 - 45.0
   211:    =>
   212: 45.0
   212:    (bind ?a (** 2 (- -11 (numberp 3))
   213: CLIPS> 898~898                            ; DR0536 - 898
   213: CLIPS> (seed (5))                         ; DR0527
   214: 898
   214: 
   215: CLIPS> (format nil "%d" 12)               ; DR0539 - "12"
   215: [EXPRNPSR1] A function name must be a symbol.
   216: "12"
   216: CLIPS> (sym-cat (str-explode "a s d g e f")) ; DR0528 - Error
   217: CLIPS> (format nil "|%d|" 12)             ; DR0539 - "|12|"
   217: 
   218: "|12|"
   218: [EXPRNPSR3] Missing function declaration for 'str-explode'.
   219: CLIPS> (clear)                            ; DR0540
   219: CLIPS> (str-length                        ; DR0529 - Error
   220: CLIPS> (defglobal ?*x* = ?*r*)            ; DR0540 - Error
   220:    (str-implode ((mv-append 1 2 3 4)
   221: [GLOBLDEF1] Global variable ?*r* is unbound.
   221: 						           (mv-append 4 3 2 1))))
   223: ERROR:
   223: [EXPRNPSR3] Missing function declaration for 'str-implode'.
   224: (defglobal MAIN ?*x* = ?*r*
   224: CLIPS> (deg-grad 90)                      ; DR0532 - 100.0
   225: CLIPS> (defglobal ?*w* = 4)               ; DR0540 - OK
   225: 100.0
   226: CLIPS> (clear)                            ; DR0541
   226: CLIPS> (* 3.6 15.0)                       ; DR0533 - 54.0
   227: CLIPS> (defclass a (is-a OBJECT) (role abstract))
   227: 54.0
   228: CLIPS> (defclass b (is-a OBJECT) (role abstract))
   228: CLIPS> (* 3.0 15.0)                       ; DR0533 - 45.0
   229: CLIPS> (defclass c (is-a a))              ; DR0541
   229: 45.0
   230: CLIPS> (defclass d (is-a b))              ; DR0541
   230: CLIPS> 898~898                            ; DR0536 - 898
   231: CLIPS> (defclass e (is-a c d))            ; DR0541
   231: 898
   232: CLIPS> (defclass f (is-a e b a))          ; DR0541
   232: CLIPS> (format nil "%d" 12)               ; DR0539 - "12"
   233: CLIPS> (describe-class e)                 ; DR0541 - e c a d b OBJECT
   233: "12"
   234: ================================================================================
   234: CLIPS> (format nil "|%d|" 12)             ; DR0539 - "|12|"
   235: ********************************************************************************
   235: "|12|"
   236: Abstract: direct instances of this class cannot be created.
   236: CLIPS> (clear)                            ; DR0540
   237: 
   237: CLIPS> (defglobal ?*x* = ?*r*)            ; DR0540 - Error
   238: Direct Superclasses: c d
   238: [GLOBLDEF1] Global variable ?*r* is unbound.
   239: Inheritance Precedence: e c a d b OBJECT
   239: 
   240: Direct Subclasses: f
   240: ERROR:
   241: ********************************************************************************
   241: (defglobal MAIN ?*x* = ?*r*
   242: ================================================================================
   242: CLIPS> (defglobal ?*w* = 4)               ; DR0540 - OK
   243: CLIPS> (describe-class f)                 ; DR0541 - f e c d b a OBJECT
   243: CLIPS> (clear)                            ; DR0541
   244: ================================================================================
   244: CLIPS> (defclass a (is-a OBJECT) (role abstract))
   245: ********************************************************************************
   245: CLIPS> (defclass b (is-a OBJECT) (role abstract))
   246: Abstract: direct instances of this class cannot be created.
   246: CLIPS> (defclass c (is-a a))              ; DR0541
   247: 
   247: CLIPS> (defclass d (is-a b))              ; DR0541
   248: Direct Superclasses: e b a
   248: CLIPS> (defclass e (is-a c d))            ; DR0541
   249: Inheritance Precedence: f e c d b a OBJECT
   249: CLIPS> (defclass f (is-a e b a))          ; DR0541
   250: Direct Subclasses:
   250: CLIPS> (describe-class e)                 ; DR0541 - e c a d b OBJECT
   251: ********************************************************************************
   251: ================================================================================
   252: ================================================================================
   252: ********************************************************************************
   253: CLIPS> (clear)                            ; DR0542
   253: Abstract: direct instances of this class cannot be created.
   254: CLIPS> (defclass a (is-a USER)            ; DR0542
   254: 
   255:    (slot x (default (+ 3 (eval "(gensym)")))))
   255: Direct Superclasses: c d
   256: [ARGACCES5] Function + expected argument #2 to be of type integer or float
   256: Inheritance Precedence: e c a d b OBJECT
   257: 
   257: Direct Subclasses: f
   258: ERROR:
   258: ********************************************************************************
   259: (defclass MAIN::a
   259: ================================================================================
   260:    (is-a USER)
   260: CLIPS> (describe-class f)                 ; DR0541 - f e c d b a OBJECT
   261:    (slot x
   261: ================================================================================
   262:       (default (+ 3 (eval "(gensym)"))))
   262: ********************************************************************************
   263: CLIPS> (clear)                            ; DR0543
   263: Abstract: direct instances of this class cannot be created.
   264: CLIPS> (deffunction blah () (if a b))     ; DR0543 - Error
   264: 
   265: 
   265: Direct Superclasses: e b a
   266: [PRNTUTIL2] Syntax Error:  Check appropriate syntax for if function.
   266: Inheritance Precedence: f e c d b a OBJECT
   267: 
   267: Direct Subclasses:
   268: ERROR:
   268: ********************************************************************************
   269: (deffunction MAIN::blah
   269: ================================================================================
   270:    ()
   270: CLIPS> (clear)                            ; DR0542
   271:    (if a
   271: CLIPS> (defclass a (is-a USER)            ; DR0542
   272:       b
   272:    (slot x (default (+ 3 (eval "(gensym)")))))
   273: CLIPS> (blah)                             ; DR0543 - Undefined
   273: [ARGACCES2] Function '+' expected argument #2 to be of type integer or float.
   275: [EXPRNPSR3] Missing function declaration for blah.
   275: ERROR:
   276: CLIPS> (clear)                            ; DR0548
   276: (defclass MAIN::a
   277: CLIPS> (set-incremental-reset FALSE)      ; DR0548
   277:    (is-a USER)
   278: TRUE
   278:    (slot x
   279: CLIPS> (defrule foo (not (a)) =>)         ; DR0548
   279:       (default (+ 3 (eval "(gensym)"))))
   280: CLIPS> (reset)                            ; DR0548
   280: CLIPS> (clear)                            ; DR0543
   281: CLIPS> (agenda)                           ; DR0548 - 1 Activation
   281: CLIPS> (deffunction blah () (if a b))     ; DR0543 - Error
   282: 0      foo: *
   282: 
   283: For a total of 1 activation.
   283: [PRNTUTIL2] Syntax Error:  Check appropriate syntax for if function.
   284: CLIPS> (clear)                            ; DR0548
   284: 
   285: CLIPS> (set-incremental-reset TRUE)       ; DR0548
   285: ERROR:
   286: FALSE
   286: (deffunction MAIN::blah
   287: CLIPS> (clear)                            ; DR0549
   287:    ()
   288: CLIPS> (defclass A (is-a USER) (role concrete) (slot xy (create-accessor read-write)))
   288:    (if a
   289: CLIPS> (make-instance a of A 
   289:       b
   290:    ((sym-cat x y) 34))             ; DR0549
   290: CLIPS> (blah)                             ; DR0543 - Undefined
   291: [a]
   291: 
   292: CLIPS> (send [a] print)                   ; DR0549
   292: [EXPRNPSR3] Missing function declaration for 'blah'.
   293: [a] of A
   293: CLIPS> (clear)                            ; DR0548
   294: (xy 34)
   294: CLIPS> (set-incremental-reset FALSE)      ; DR0548
   295: CLIPS> (clear)                            ; DR0551
   295: 
   296: CLIPS> (set-strategy breadth)             ; DR0551
   296: [EXPRNPSR3] Missing function declaration for 'set-incremental-reset'.
   297: depth
   297: CLIPS> (defrule foo (not (a)) =>)         ; DR0548
   298: CLIPS> (defrule blah (declare (salience 10)) =>)
   298: CLIPS> (reset)                            ; DR0548
   299: CLIPS> (defrule flub (declare (salience -10)) =>)
   299: CLIPS> (agenda)                           ; DR0548 - 1 Activation
   300: CLIPS> (reset)                            ; DR0551
   300: 0      foo: *
   301: CLIPS> (agenda)                           ; DR0551 - blah, flub
   301: For a total of 1 activation.
   302: 10     blah: *
   302: CLIPS> (clear)                            ; DR0548
   303: -10    flub: *
   303: CLIPS> (set-incremental-reset TRUE)       ; DR0548
   304: For a total of 2 activations.
   304: 
   305: CLIPS> (set-strategy depth)               ; DR0551
   305: [EXPRNPSR3] Missing function declaration for 'set-incremental-reset'.
   306: breadth
   306: CLIPS> (clear)                            ; DR0549
   307: CLIPS> (clear)                            ; DR0552
   307: CLIPS> (defclass A (is-a USER) (role concrete) (slot xy (create-accessor read-write)))
   308: CLIPS> (defclass A (is-a USER) (role concrete)); DR0552
   308: CLIPS> (make-instance a of A 
   309: CLIPS> (defclass B (is-a USER) (role concrete)); DR0552
   309:    ((sym-cat x y) 34))             ; DR0549
   310: CLIPS> (make-instance a1 of A)            ; DR0552 - [a1]
   310: [a]
   311: [a1]
   311: CLIPS> (send [a] print)                   ; DR0549
   312: CLIPS> (make-instance a2 of A)            ; DR0552 - [a2]
   312: [a] of A
   313: [a2]
   313: (xy 34)
   314: CLIPS> (make-instance b1 of B)            ; DR0552 - [b1]
   314: CLIPS> (clear)                            ; DR0551
   315: [b1]
   315: CLIPS> (set-strategy breadth)             ; DR0551
   316: CLIPS> (make-instance b2 of B)            ; DR0552 - [b2]
   316: depth
   317: [b2]
   317: CLIPS> (defrule blah (declare (salience 10)) =>)
   318: CLIPS> (do-for-all-instances ((?a A)) TRUE
   318: CLIPS> (defrule flub (declare (salience -10)) =>)
   319:    (do-for-all-instances ((?b B)) TRUE
   319: CLIPS> (reset)                            ; DR0551
   320:      (printout t (instance-name ?a) " " 
   320: CLIPS> (agenda)                           ; DR0551 - blah, flub
   321:                  (instance-name ?b) crlf))) ; [a1][b1], [a1][b2], [a2][b1], [a2][b2]
   321: 10     blah: *
   322: [a1] [b1]
   322: -10    flub: *
   323: [a1] [b2]
   323: For a total of 2 activations.
   324: [a2] [b1]
   324: CLIPS> (set-strategy depth)               ; DR0551
   325: [a2] [b2]
   325: breadth
   326: CLIPS> (format nil "%d1234567890123456789012345678901234567890" 333) ; DR0559
   326: CLIPS> (clear)                            ; DR0552
   327: "3331234567890123456789012345678901234567890"
   327: CLIPS> (defclass A (is-a USER) (role concrete)); DR0552
   328: CLIPS> (clear)                            ; DR0561
   328: CLIPS> (defclass B (is-a USER) (role concrete)); DR0552
   329: CLIPS> (deftemplate foo                   ; DR0561
   329: CLIPS> (make-instance a1 of A)            ; DR0552 - [a1]
   330:    (field x (type EXTERNAL-ADDRESS)))
   330: [a1]
   331: CLIPS> (assert (foo))                     ; DR0561
   331: CLIPS> (make-instance a2 of A)            ; DR0552 - [a2]
   332: <Fact-1>
   332: [a2]
   333: CLIPS> (facts)                            ; DR0561
   333: CLIPS> (make-instance b1 of B)            ; DR0552 - [b1]
   334: f-0     (initial-fact)
   334: [b1]
   335: f-1     (foo (x <Pointer-C-0x0>)) ;; Any NULL pointer is OK
   335: CLIPS> (make-instance b2 of B)            ; DR0552 - [b2]
   336: For a total of 2 facts.
   336: [b2]
   337: CLIPS> (clear)                            ; DR0562
   337: CLIPS> (do-for-all-instances ((?a A)) TRUE
   338: CLIPS> (deffunction foo ()                ; DR0562
   338:    (do-for-all-instances ((?b B)) TRUE
   339:    (+ ?a 1) (bind ?a 2))           ; DR0562
   339:      (printout t (instance-name ?a) " " 
   340: CLIPS> (foo)                              ; DR0562 - Error
   340:                  (instance-name ?b) crlf))) ; [a1][b1], [a1][b2], [a2][b1], [a2][b2]
   341: [PRCCODE5] Variable a unbound in deffunction foo.
   341: [a1] [b1]
   342: [ARGACCES5] Function + expected argument #1 to be of type integer or float
   342: [a1] [b2]
   343: [PRCCODE4] Execution halted during the actions of deffunction foo.
   343: [a2] [b1]
   344: FALSE
   344: [a2] [b2]
   345: CLIPS> (clear)                            ; DR0566
   345: CLIPS> (format nil "%d1234567890123456789012345678901234567890" 333) ; DR0559
   346: CLIPS> (bind ?a 3)                        ; DR0566 - 3
   346: "3331234567890123456789012345678901234567890"
   347: 3
   347: CLIPS> (clear)                            ; DR0561
   348: CLIPS> (bind ?b 4)                        ; DR0566 - 4
   348: CLIPS> (deftemplate foo                   ; DR0561
   349: 4
   349:    (field x (type EXTERNAL-ADDRESS)))
   350: CLIPS> (+ ?a 3)
   350: CLIPS> (assert (foo))                     ; DR0561
   351: 6
   351: <Fact-1>
   352: CLIPS> (+ ?a ?b)
   352: CLIPS> (facts)                            ; DR0561
   353: 7
   353: f-1     (foo (x <Pointer-C-0000000000000000>))
   354: CLIPS> (reset)
   354: For a total of 1 fact.
   355: CLIPS> (+ ?a 3)                           ; DR0566 - Error
   355: CLIPS> (clear)                            ; DR0562
   356: [EVALUATN1] Variable a is unbound
   356: CLIPS> (deffunction foo ()                ; DR0562
   357: [ARGACCES5] Function + expected argument #1 to be of type integer or float
   357:    (+ ?a 1) (bind ?a 2))           ; DR0562
   358: 0
   358: CLIPS> (foo)                              ; DR0562 - Error
   359: CLIPS> (+ ?a ?b)                          ; DR0566 - Error
   359: [PRCCODE5] Variable ?a unbound in deffunction 'foo'.
   360: [EVALUATN1] Variable a is unbound
   360: [ARGACCES2] Function '+' expected argument #1 to be of type integer or float.
   361: [ARGACCES5] Function + expected argument #1 to be of type integer or float
   361: [PRCCODE4] Execution halted during the actions of deffunction 'foo'.
   362: 0
   362: FALSE
   363: CLIPS> (+ ?e 4)                           ; DR0566 - Error
   363: CLIPS> (clear)                            ; DR0566
   364: [EVALUATN1] Variable e is unbound
   364: CLIPS> (bind ?a 3)                        ; DR0566 - 3
   365: [ARGACCES5] Function + expected argument #1 to be of type integer or float
   365: 3
   366: 0
   366: CLIPS> (bind ?b 4)                        ; DR0566 - 4
   367: CLIPS> (clear)                            ; DR0567
   367: 4
   368: CLIPS> (deffunction foo (?a ?a))          ; DR0567 - Error
   368: CLIPS> (+ ?a 3)
   369: [PRCCODE7] Duplicate parameter names not allowed.
   369: 6
   370: 
   370: CLIPS> (+ ?a ?b)
   371: ERROR:
   371: 7
   372: (deffunction MAIN::foo
   372: CLIPS> (reset)
   373:    (?a ?a
   373: CLIPS> (+ ?a 3)                           ; DR0566 - Error
   374: CLIPS> (format t "%s (Yes or No)" "Play Again?") ; DR0568
   374: [EVALUATN1] Variable ?a is unbound.
   375: Play Again? (Yes or No)"Play Again? (Yes or No)"
   375: [ARGACCES2] Function '+' expected argument #1 to be of type integer or float.
   376: CLIPS> (clear)                            ; DR0569
   376: 0
   377: CLIPS> (defclass A (is-a USER)            ; DR0569
   377: CLIPS> (+ ?a ?b)                          ; DR0566 - Error
   378:    (role concrete)
   378: [EVALUATN1] Variable ?a is unbound.
   379:    (slot unassigned-parcels)
   379: [ARGACCES2] Function '+' expected argument #1 to be of type integer or float.
   380:    (slot x-location (create-accessor read-write)))
   380: 0
   381: CLIPS> (make-instance a of A)             ; DR0569 - [a]
   381: CLIPS> (+ ?e 4)                           ; DR0566 - Error
   382: [a]
   382: [EVALUATN1] Variable ?e is unbound.
   383: CLIPS> (send [a] put-x-location 34)       ; DR0569 - TRUE
   383: [ARGACCES2] Function '+' expected argument #1 to be of type integer or float.
   384: 34
   384: 0
   385: CLIPS> (clear)                            ; DR0570
   385: CLIPS> (clear)                            ; DR0567
   386: CLIPS> (deffunction defgeneric ())        ; DR0570 - Error
   386: CLIPS> (deffunction foo (?a ?a))          ; DR0567 - Error
   387: [DFFNXPSR1] Deffunctions are not allowed to replace constructs.
   387: [PRCCODE7] Duplicate parameter names not allowed.
   390: (deffunction MAIN::defgeneric
   390: (deffunction MAIN::foo
   391:    (
   391:    (?a ?a
   392: CLIPS> (deffunction defclass ())          ; DR0570 - Error
   392: CLIPS> (format t "%s (Yes or No)" "Play Again?") ; DR0568
   393: [DFFNXPSR1] Deffunctions are not allowed to replace constructs.
   393: Play Again? (Yes or No)"Play Again? (Yes or No)"
   394: 
   394: CLIPS> (clear)                            ; DR0569
   395: ERROR:
   395: CLIPS> (defclass A (is-a USER)            ; DR0569
   396: (deffunction MAIN::defclass
   396:    (role concrete)
   397:    (
   397:    (slot unassigned-parcels)
   398: CLIPS> (deffunction deftemplate ())       ; DR0570 - Error
   398:    (slot x-location (create-accessor read-write)))
   399: [DFFNXPSR1] Deffunctions are not allowed to replace constructs.
   399: CLIPS> (make-instance a of A)             ; DR0569 - [a]
   400: 
   400: [a]
   401: ERROR:
   401: CLIPS> (send [a] put-x-location 34)       ; DR0569 - TRUE
   402: (deffunction MAIN::deftemplate
   402: 34
   403:    (
   403: CLIPS> (clear)                            ; DR0570
   404: CLIPS> (deffunction defmethod ())         ; DR0570 - Error
   404: CLIPS> (deffunction defgeneric ())        ; DR0570 - Error
   408: (deffunction MAIN::defmethod
   408: (deffunction MAIN::defgeneric
   410: CLIPS> (deffunction deffacts ())          ; DR0570 - Error
   410: CLIPS> (deffunction defclass ())          ; DR0570 - Error
   414: (deffunction MAIN::deffacts
   414: (deffunction MAIN::defclass
   416: CLIPS> (list-deffunctions)                ; DR0570 - None
   416: CLIPS> (deffunction deftemplate ())       ; DR0570 - Error
   417: CLIPS> (clear)                            ; DR0571
   417: [DFFNXPSR1] Deffunctions are not allowed to replace constructs.
   418: CLIPS> (defglobal ?*x* = 3)               ; DR0571
   418: 
   419: CLIPS> (assert (a))                       ; DR0571
   419: ERROR:
   420: <Fact-1>
   420: (deffunction MAIN::deftemplate
   421: CLIPS> (defrule foo ?f <- (a) => (bind ?*x* ?f))
   421:    (
   422: CLIPS> (run)                              ; DR0571
   422: CLIPS> (deffunction defmethod ())         ; DR0570 - Error
   423: CLIPS> (printout t ?*x* crlf)             ; DR0571
   423: [DFFNXPSR1] Deffunctions are not allowed to replace constructs.
   424: <Fact-1>
   424: 
   425: CLIPS> ?*x*                               ; DR0571
   425: ERROR:
   426: <Fact-1>
   426: (deffunction MAIN::defmethod
   427: CLIPS> (clear)                            ; DR0573
   427:    (
   428: CLIPS> (defclass A (is-a USER))           ; DR0573
   428: CLIPS> (deffunction deffacts ())          ; DR0570 - Error
   429: CLIPS> (defclass B (is-a USER))           ; DR0573
   429: [DFFNXPSR1] Deffunctions are not allowed to replace constructs.
   430: CLIPS> (defclass C (is-a A B) (role concrete)) ; DR0573
   430: 
   431: CLIPS> (make-instance c of C)             ; DR0573 - [c]
   431: ERROR:
   432: [c]
   432: (deffunction MAIN::deffacts
   433: CLIPS> (instances)                        ; DR0573 - 1 instance
   433:    (
   434: [initial-object] of INITIAL-OBJECT
   434: CLIPS> (list-deffunctions)                ; DR0570 - None
   435: [c] of C
   435: CLIPS> (clear)                            ; DR0571
   436: For a total of 2 instances.
   436: CLIPS> (defglobal ?*x* = 3)               ; DR0571
   437: CLIPS> (instances MAIN B inherit)              ; DR0573 - 1 instance
   437: CLIPS> (assert (a))                       ; DR0571
   438: [c] of C
   438: <Fact-1>
   439: For a total of 1 instance.
   439: CLIPS> (defrule foo ?f <- (a) => (bind ?*x* ?f))
   440: CLIPS> (do-for-all-instances ((?u USER)) TRUE
   440: CLIPS> (run)                              ; DR0571
   441:     (printout t ?u crlf))          ; DR0573 - 1 instance
   441: CLIPS> (printout t ?*x* crlf)             ; DR0571
   442: [initial-object]
   442: <Fact-1>
   443: [c]
   443: CLIPS> ?*x*                               ; DR0571
   444: CLIPS> (clear)                            ; DR0575
   444: <Fact-1>
   445: CLIPS> (defrule try-or (or (a) (b)) =>)   ; DR0575
   445: CLIPS> (clear)                            ; DR0573
   446: CLIPS> (bsave "Temp//drtest06.bin")       ; DR0575
   446: CLIPS> (defclass A (is-a USER))           ; DR0573
   447: TRUE
   447: CLIPS> (defclass B (is-a USER))           ; DR0573
   448: CLIPS> (clear)                            ; DR0575
   448: CLIPS> (defclass C (is-a A B) (role concrete)) ; DR0573
   449: CLIPS> (bload "Temp//drtest06.bin")       ; DR0575
   449: CLIPS> (make-instance c of C)             ; DR0573 - [c]
   450: TRUE
   450: [c]
   451: CLIPS> (clear)                            ; DR0575
   451: CLIPS> (instances)                        ; DR0573 - 1 instance
   452: CLIPS> (clear)                            ; DR0576
   452: [c] of C
   453: CLIPS> (deffunction bar () (eval "(+ 5 6)"))
   453: For a total of 1 instance.
   454: CLIPS> (deffunction foo () (eval "(+ 3 4 (bar))"))
   454: CLIPS> (instances MAIN B inherit)              ; DR0573 - 1 instance
   455: CLIPS> (foo)                              ; DR0576 - 18
   455: [c] of C
   456: 18
   456: For a total of 1 instance.
   457: CLIPS> (bar)                              ; DR0576 - 11
   457: CLIPS> (do-for-all-instances ((?u USER)) TRUE
   458: 11
   458:     (printout t ?u crlf))          ; DR0573 - 1 instance
   459: CLIPS> (clear)                            ; DR0577
   459: [c]
   460: CLIPS> (defclass A (is-a USER) (slot foo (create-accessor read-write)))
   460: CLIPS> (clear)                            ; DR0575
   461: CLIPS> (defclass B (is-a A))              ; DR0577
   461: CLIPS> (defrule try-or (or (a) (b)) =>)   ; DR0575
   462: CLIPS> (defmessage-handler A put-foo ())  ; DR0577 - Error
   462: CLIPS> (bsave "Temp//drtest06.bin")       ; DR0575
   463: [MSGPSR3] System message-handlers may not be modified.
   463: TRUE
   464: 
   464: CLIPS> (clear)                            ; DR0575
   465: ERROR:
   465: CLIPS> (bload "Temp//drtest06.bin")       ; DR0575
   466: (defmessage-handler MAIN::A put-foo
   466: TRUE
   467:    (
   467: CLIPS> (clear)                            ; DR0575
   468: CLIPS> (defmessage-handler B get-foo ())  ; DR0577 - OK
   468: CLIPS> (clear)                            ; DR0576
   469: CLIPS> (defmessage-handler B put-foo ())  ; DR0577 - OK
   469: CLIPS> (deffunction bar () (eval "(+ 5 6)"))
   470: CLIPS> (clear)                            ; DR0584 - Behavior changed
   470: CLIPS> (deffunction foo () (eval "(+ 3 4 (bar))"))
   471: CLIPS> (defclass A (is-a USER)            ; DR0584
   471: CLIPS> (foo)                              ; DR0576 - 18
   472:    (role concrete)
   472: 18
   473:    (slot foo (create-accessor ?NONE) (access read-only) (default 5)))
   473: CLIPS> (bar)                              ; DR0576 - 11
   474: CLIPS> (defmessage-handler A put-foo primary (?value)
   474: 11
   475:   (dynamic-put foo ?value))
   475: CLIPS> (clear)                            ; DR0577
   476: CLIPS> (make-instance a of A)             ; DR0584 - [a]
   476: CLIPS> (defclass A (is-a USER) (slot foo (create-accessor read-write)))
   477: [a]
   477: CLIPS> (defclass B (is-a A))              ; DR0577
   478: CLIPS> (instances)                        ; DR0584
   478: CLIPS> (defmessage-handler A put-foo ())  ; DR0577 - Error
   479: [initial-object] of INITIAL-OBJECT
   479: [MSGPSR3] System message-handlers may not be modified.
   480: [a] of A
   480: 
   481: For a total of 2 instances.
   481: ERROR:
   482: CLIPS> (save-instances "Temp//drtest06.tmp")    ; DR0584
   482: (defmessage-handler MAIN::A put-foo
   483: 2
   483:    (
   484: CLIPS> (unmake-instance a)                ; DR0584
   484: CLIPS> (defmessage-handler B get-foo ())  ; DR0577 - OK
   485: TRUE
   485: CLIPS> (defmessage-handler B put-foo ())  ; DR0577 - OK
   486: CLIPS> (load-instances "Temp//drtest06.tmp")    ; DR0584
   486: CLIPS> (clear)                            ; DR0584 - Behavior changed
   487: [MSGFUN3] foo slot in [a] of A: write access denied.
   487: CLIPS> (defclass A (is-a USER)            ; DR0584
   488: [PRCCODE4] Execution halted during the actions of message-handler put-foo primary in class A
   488:    (role concrete)
   489: [INSFILE1] Function load-instances could not completely process file Temp//drtest06.tmp.
   489:    (slot foo (create-accessor ?NONE) (access read-only) (default 5)))
   490: 1
   490: CLIPS> (defmessage-handler A put-foo primary (?value)
   491: CLIPS> (instances)                        ; DR0584
   491:   (dynamic-put foo ?value))
   492: [initial-object] of INITIAL-OBJECT
   492: CLIPS> (make-instance a of A)             ; DR0584 - [a]
   493: For a total of 1 instance.
   493: [a]
   494: CLIPS> (restore-instances "Temp//drtest06.tmp") ; See CRS
   494: CLIPS> (instances)                        ; DR0584
   495: 2
   495: [a] of A
   496: CLIPS> (instances)                        ; DR0584
   496: For a total of 1 instance.
   497: [initial-object] of INITIAL-OBJECT
   497: CLIPS> (save-instances "Temp//drtest06.tmp")    ; DR0584
   498: [a] of A
   498: 1
   499: For a total of 2 instances.
   499: CLIPS> (unmake-instance a)                ; DR0584
   500: CLIPS> (clear)                            ; DR0588
   500: TRUE
   501: CLIPS> (ppdefinstances Teams)             ; DR0588
   501: CLIPS> (load-instances "Temp//drtest06.tmp")    ; DR0584
   502: [PRNTUTIL1] Unable to find definstances Teams.
   502: [MSGFUN3] Write access denied for slot 'foo' in instance [a] of class 'A'.
   503: CLIPS> (clear)                            ; DR0590
   503: [PRCCODE4] Execution halted during the actions of message-handler 'put-foo' primary in class 'A'
   504: CLIPS> (undefinstances *)                 ; DR0590
   504: [INSFILE1] Function 'load-instances' could not completely process file 'Temp//drtest06.tmp'.
   505: CLIPS> (undefinstances Tom)               ; DR0590
   505: 0
   506: [PRNTUTIL1] Unable to find definstances Tom.
   506: CLIPS> (instances)                        ; DR0584
   507: CLIPS> (clear)                            ; DR0591
   507: CLIPS> (restore-instances "Temp//drtest06.tmp") ; See CRS
   508: CLIPS> (defrule two                       ; DR0591
   508: 1
   509:    =>
   509: CLIPS> (instances)                        ; DR0584
   510:   (clear)
   510: [a] of A
   511:   (printout t "Rule Fired" crlf))
   511: For a total of 1 instance.
   512: CLIPS> (reset)                            ; DR0591    
   512: CLIPS> (clear)                            ; DR0588
   513: CLIPS> (run)                              ; DR0591
   513: CLIPS> (ppdefinstances Teams)             ; DR0588
   514: [CONSTRCT1] Some constructs are still in use. Clear cannot continue.
   514: [PRNTUTIL1] Unable to find definstances 'Teams'.
   515: Rule Fired
   515: CLIPS> (clear)                            ; DR0590
   516: CLIPS> (clear)                            ; DR0592
   516: CLIPS> (undefinstances *)                 ; DR0590
   517: CLIPS> (deftemplate color                 ; DR0592
   517: CLIPS> (undefinstances Tom)               ; DR0590
   518:    (field standard
   518: [PRNTUTIL1] Unable to find definstances 'Tom'.
   519:       (type SYMBOL)
   519: CLIPS> (clear)                            ; DR0591
   520:       (default white)
   520: CLIPS> (defrule two                       ; DR0591
   521:       (allowed-symbols red white blue)))
   521:    =>
   522: CLIPS>  (defrule one                      ; DR0592 - Error
   522:   (clear)
   523:     ?f1 <- (color (standard ?))
   523:   (printout t "Rule Fired" crlf))
   524:     =>
   524: CLIPS> (reset)                            ; DR0591    
   525:     (modify ?f1 (standard none)))
   525: CLIPS> (run)                              ; DR0591
   526: 
   526: [CONSTRCT1] Some constructs are still in use. Clear cannot continue.
   527: [CSTRNCHK1] A literal slot value found in the modify command
   527: Rule Fired
   528: does not match the allowed values for slot standard.
   528: CLIPS> (clear)                            ; DR0592
   529: 
   529: CLIPS> (deftemplate color                 ; DR0592
   530: ERROR:
   530:    (field standard
   531: (defrule MAIN::one
   531:       (type SYMBOL)
   532:    ?f1 <- (color (standard ?))
   532:       (default white)
   533:    =>
   533:       (allowed-symbols red white blue)))
   534:    (modify ?f1 (standard none)))
   534: CLIPS>  (defrule one                      ; DR0592 - Error
   535: CLIPS> (progn (release-mem) TRUE)         ; DR0592
   535:     ?f1 <- (color (standard ?))
   536: TRUE
   536:     =>
   537: CLIPS> (clear)                            ; DR0594
   537:     (modify ?f1 (standard none)))
   538: CLIPS> (defrule junk => (bsave "Temp//drtest06.bin"))     
   538: 
   539: CLIPS> (reset)                            ; DR0594
   539: [CSTRNCHK1] A literal slot value found in the 'modify' command does not match the allowed values for slot 'standard'.
   540: CLIPS> (run)                              ; DR0594
   540: 
   541: CLIPS> (bload "Temp//drtest06.bin")       ; DR0594
   541: ERROR:
   542: TRUE
   542: (defrule MAIN::one
   543: CLIPS> (reset)                            ; DR0594
   543:    ?f1 <- (color (standard ?))
   544: CLIPS> (run)                              ; DR0594
   544:    =>
   545: [BSAVE1] Cannot perform a binary save while a binary load is in effect.
   545:    (modify ?f1 (standard none)))
   546: CLIPS> (div 11.0 .5)                      ; DR0595
   546: CLIPS> (progn (release-mem) TRUE)         ; DR0592
   547: [PRNTUTIL7] Attempt to divide by zero in div function.
   547: TRUE
   548: 1
   548: CLIPS> (clear)                            ; DR0594
   549: CLIPS> (clear)                            ; DR0600
   549: CLIPS> (defrule junk => (bsave "Temp//drtest06.bin"))     
   550: CLIPS> (defmethod blah 1 ())              ; DR0600
   550: CLIPS> (reset)                            ; DR0594
   551: CLIPS> (defmethod blah (?a))              ; DR0600
   551: CLIPS> (run)                              ; DR0594
   552: CLIPS> (list-defmethods)                  ; DR0600
   552: CLIPS> (bload "Temp//drtest06.bin")       ; DR0594
   553: blah #2  ()
   553: TRUE
   554: blah #1  
   554: CLIPS> (reset)                            ; DR0594
   555: For a total of 2 methods.
   555: CLIPS> (run)                              ; DR0594
   556: CLIPS> (dribble-off)
   556: [BSAVE1] Cannot perform a binary save while a binary load is in effect.
   Files do not have the same # of lines
